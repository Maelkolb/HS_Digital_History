import nltk
from nltk import FreqDist
import matplotlib.pyplot as plt

nltk.download('punkt')
nltk.download('stopwords')

# Dateipfad 
file_path = 'cleaned_lemmatized_text_KG-full.txt'

words_to_analyze = ['heresy', 'heresiarchs', 'menander', 'simon magus', 'simon', 'ebionite', 'cerinthus', 'cerinthian', 'nicolaus', 'nicolaitans',
                   'saturninus', 'saturnilians', 'basilides', 'basilidians', 'carpocratians', 'carpocrates', 'valentinus',
                    'valentinians', 'cerdon', 'marc magus', 'marcion', 'marcions', 'tatian', 'tatians', 'severus', 'severians',
                   'bardesanes', 'apelles', 'montanus', 'florinus', 'blastus', 'artemon', 'theodotus', 'beryllus', 'the dissension of the arabian',
                   'elkesites', 'novatus', 'sabellius', 'paul of samosata', 'manichean']

# Funktion zum Einlesen des Textkorpus aus der Datei
def read_corpus_from_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

# Funktion zum Bereinigen und Tokenisieren des Textkorpus
def preprocess_text(text):
    tokens = nltk.word_tokenize(text.lower())
    stop_words = set(nltk.corpus.stopwords.words('german'))
    return [word for word in tokens if word.isalnum() and word not in stop_words]

text_corpus = read_corpus_from_file(file_path)

# Pre-Processing
filtered_tokens = preprocess_text(text_corpus)

# Segmentierung
segment_size = len(filtered_tokens) // 10
segment_frequencies = []

# Frequenzanalyse
for i in range(10):
    segment_start = i * segment_size
    segment_end = (i + 1) * segment_size
    segment = filtered_tokens[segment_start:segment_end]
    freq_dist = FreqDist(segment)
    segment_frequency = sum(freq_dist[word] for word in words_to_analyze)
    segment_frequencies.append(segment_frequency)

# Speicherung
with open('frequenzanalyse_ergebnisse_heresy.txt', 'w', encoding='utf-8') as output_file:
    output_file.write(f'Häufigkeit der Wörter "{", ".join(words_to_analyze)}" in 10 Segmenten:\n')
    for i, frequency in enumerate(segment_frequencies):
        output_file.write(f"Segment {i+1}: {frequency}\n")

# Visualisierung 
plt.figure(figsize=(10, 6))
plt.bar(range(1, 11), segment_frequencies)
plt.title(f'Häufigkeit aller 26 Häresien im Korpus')
plt.xlabel('Segment')
plt.ylabel('Absolute Häufigkeit')
plt.grid(True)
plt.show()
